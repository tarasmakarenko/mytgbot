"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –¥–ª—è Telegram-–±–æ—Ç–∞.

–ú—ñ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é,
—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
"""
import json
import logging
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

# –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏.

    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º—ñ—Å—Ç–∏—Ç—å –¥–≤—ñ –∫–Ω–æ–ø–∫–∏: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" —Ç–∞ "English",
    –∫–æ–∂–Ω–∞ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º callback_data.

    :returns: –û–±'—î–∫—Ç InlineKeyboardMarkup –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏.
    :rtype: telegram.InlineKeyboardMarkup
    """
    logger.debug("Generating language selection keyboard.")
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="uk"),
         InlineKeyboardButton("English", callback_data="en")]
    ])

def get_main_menu(lang: str) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î ReplyKeyboardMarkup –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏ –º–µ–Ω—é
    (FAQ, –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é, –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—É–¥, –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞—Å—ñ–¥–∞–Ω—å, –ö–æ–Ω—Ç–∞–∫—Ç–∏)
    —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–∞–º–∏. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω—é—î —Ä–æ–∑–º—ñ—Ä.

    :param lang: –ö–æ–¥ –º–æ–≤–∏ ('uk' –∞–±–æ 'en').
    :type lang: str
    :returns: –û–±'—î–∫—Ç ReplyKeyboardMarkup –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    :rtype: telegram.ReplyKeyboardMarkup
    """
    logger.debug(f"Generating main menu keyboard for language '{lang}'.")
    if lang == "en":
        return ReplyKeyboardMarkup(
            [["‚ùì FAQ", "üìÖ Appointment"],
             ["‚ÑπÔ∏è Court Info", "üóì Hearing Calendar"],
             ["üìû Other Institutions"]],
            resize_keyboard=True
        )
    return ReplyKeyboardMarkup(
        [["‚ùì –ü–æ—à–∏—Ä–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", "üìÖ –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é"],
         ["‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—É–¥", "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞—Å—ñ–¥–∞–Ω—å"],
         ["üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ —ñ–Ω—à–∏—Ö —É—Å—Ç–∞–Ω–æ–≤"]],
        resize_keyboard=True
    )

def get_faq_keyboard(lang: str, correlation_id: str = "N/A") -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–æ—à–∏—Ä–µ–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    –ß–∏—Ç–∞—î –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É `faq.json` —Ç–∞ —Å—Ç–≤–æ—Ä—é—î ReplyKeyboardMarkup,
    –¥–µ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —î –æ–∫—Ä–µ–º–æ—é –∫–Ω–æ–ø–∫–æ—é.

    :param lang: –ö–æ–¥ –º–æ–≤–∏ ('uk' –∞–±–æ 'en').
    :type lang: str
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –û–±'—î–∫—Ç ReplyKeyboardMarkup –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø–∏—Ç–∞–Ω—å FAQ.
    :rtype: telegram.ReplyKeyboardMarkup
    """
    logger.debug(f"[REQ_ID:{correlation_id}] Generating FAQ keyboard for language '{lang}'.")
    try:
        with open("faq.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        return ReplyKeyboardMarkup([[q] for q in data[lang].keys()], resize_keyboard=True)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"ERR_KB_001 [REQ_ID:{correlation_id}]: Failed to load faq.json for language '{lang}': {e}", exc_info=True)
        # –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–±–æ –º–µ–Ω—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        return ReplyKeyboardMarkup([["–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è FAQ"]], resize_keyboard=True)

def get_inline_keyboard(options: list) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –æ–ø—Ü—ñ–π.

    –°—Ç–≤–æ—Ä—é—î InlineKeyboardMarkup, –¥–µ –∫–æ–∂–Ω–∞ –æ–ø—Ü—ñ—è –∑—ñ —Å–ø–∏—Å–∫—É
    —Å—Ç–∞—î –æ–∫—Ä–µ–º–æ—é –∫–Ω–æ–ø–∫–æ—é –∑ —ó—ó —Ç–µ–∫—Å—Ç–æ–º —è–∫ `callback_data`.

    :param options: –°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —è–∫ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Ç–∞ callback_data.
    :type options: list[str]
    :returns: –û–±'—î–∫—Ç InlineKeyboardMarkup –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏.
    :rtype: telegram.InlineKeyboardMarkup
    """
    logger.debug(f"Generating inline keyboard with {len(options)} options.")
    return InlineKeyboardMarkup([[InlineKeyboardButton(opt, callback_data=opt)] for opt in options])

