"""
–ú–æ–¥—É–ª—å —É—Ç–∏–ª—ñ—Ç –¥–ª—è Telegram-–±–æ—Ç–∞.

–ú—ñ—Å—Ç–∏—Ç—å –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ JSON (–∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö),
–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞—Ç —ñ —á–∞—Å—É, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–≤–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏.
"""
import json
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, Any, Union

# –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# --- –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
_messages_data: Dict[str, Dict[str, str]] = {}
MESSAGES_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'messages.json')

def _load_messages():
    """–í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    global _messages_data # pylint: disable=global-statement
    try:
        with open(MESSAGES_FILE, "r", encoding="utf-8") as file_handle:
            _messages_data = json.load(file_handle)
        logger.info("Messages data loaded successfully.")
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.critical(f"ERR_UTIL_001: Critical error loading messages.json: {e}", exc_info=True)
        # –£ –≤–∏–ø–∞–¥–∫—É –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        _messages_data = {
            "uk": {
                "generic_user_error": "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "generic_user_error_with_contact": "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                "admin_critical_error_notification": "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞!",
                "choose_language": "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:",
                "language_set_success": "‚úÖ –ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                "choose_faq_question": "‚ùì –û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:",
                "faq_answer_not_found": "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                "data_load_error": "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "no_schedule_available": "–ù–∞—Ä–∞–∑—ñ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞—Å—ñ–¥–∞–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.",
                "court_schedule_title": "üìÖ –†–æ–∑–∫–ª–∞–¥ –∑–∞—Å—ñ–¥–∞–Ω—å:",
                "case": "–°–ø—Ä–∞–≤–∞",
                "judge": "–°—É–¥–¥—è",
                "no_contacts_available": "–ù–∞—Ä–∞–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —ñ–Ω—à–∏—Ö —É—Å—Ç–∞–Ω–æ–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ.",
                "other_contacts_title": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ —ñ–Ω—à–∏—Ö —É—Å—Ç–∞–Ω–æ–≤:",
                "enter_full_name": "üìù –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –¥–ª—è –∑–∞–ø–∏—Å—É:",
                "choose_date": "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
                "no_dates_available": "–ù–∞ –∂–∞–ª—å, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î.",
                "choose_time": "‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                "no_times_available": "–ù–∞ –∂–∞–ª—å, –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Å—É –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î.",
                "appointment_booked_success": "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ!",
                "no_name_provided": "–ë–µ–∑ —ñ–º–µ–Ω—ñ",
                "unrecognized_command": "ü§∑‚Äç‚ôÄÔ∏è –í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start.",
                "unauthorized_access": "üö´ –í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.",
                "admin_panel_greeting": "–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –¶–µ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.",
                "address": "–ê–¥—Ä–µ—Å–∞",
                "schedule": "–ì—Ä–∞—Ñ—ñ–∫",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "email": "Email",
                "no_appointments_admin": "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.",
                "no_appointments_user": "No appointments yet."
            },
            "en": {
                "generic_user_error": "Sorry, an unexpected error occurred. Please try again later.",
                "generic_user_error_with_contact": "Sorry, an unexpected error occurred. Please try again later or contact the administrator.",
                "admin_critical_error_notification": "Critical error in bot operation!",
                "choose_language": "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:",
                "language_set_success": "‚úÖ Language set!",
                "choose_faq_question": "‚ùì Choose a question:",
                "faq_answer_not_found": "‚ö†Ô∏è Sorry, no answer found for this question. Try another question or contact the administrator.",
                "data_load_error": "‚ö†Ô∏è Sorry, there was an error loading data. Please try again later.",
                "no_schedule_available": "No hearing schedule available at the moment.",
                "court_schedule_title": "üìÖ Hearing Schedule:",
                "case": "Case",
                "judge": "Judge",
                "no_contacts_available": "No contacts for other institutions available at the moment.",
                "other_contacts_title": "üìû Other Institutions Contacts:",
                "enter_full_name": "üìù Enter full name for appointment:",
                "choose_date": "üìÖ Choose a date:",
                "no_dates_available": "Sorry, no available dates for appointment.",
                "choose_time": "‚è∞ Choose a time:",
                "no_times_available": "Sorry, no available times for this date.",
                "appointment_booked_success": "‚úÖ You are successfully booked!",
                "no_name_provided": "No name provided",
                "unrecognized_command": "ü§∑‚Äç‚ôÄÔ∏è Sorry, I didn't understand your command. Please choose an option from the menu or use /start.",
                "unauthorized_access": "üö´ Sorry, you do not have access to this command.",
                "admin_panel_greeting": "Hello, admin! This is the admin panel.",
                "address": "Address",
                "schedule": "Schedule",
                "phone": "Phone",
                "email": "Email",
                "no_appointments_admin": "No appointments.",
                "no_appointments_user": "No appointments yet."
            }
        }
    except Exception as ex:
        logger.critical(f"ERR_UTIL_002: Very critical error during message loading fallback: {ex}", exc_info=True)
        _messages_data = {
            "uk": {"generic_user_error": "System error. Please try again later."},
            "en": {"generic_user_error": "System error. Please try again later."}
        }

_load_messages()

def load_language_message(lang_code: str, message_key: str) -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º —Ç–∞ –∫–æ–¥–æ–º –º–æ–≤–∏.
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —è–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

    :param lang_code: –ö–æ–¥ –º–æ–≤–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'uk' –∞–±–æ 'en').
    :type lang_code: str
    :param message_key: –ö–ª—é—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    :type message_key: str
    :returns: –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    :rtype: str
    """
    logger.debug(f"Attempting to load message '{message_key}' for language '{lang_code}'.")

    if lang_code not in _messages_data:
        logger.warning(f"WARN_UTIL_001: Language '{lang_code}' not found in messages data. Falling back to 'en'.")
        lang_code = 'en'

    message = _messages_data.get(lang_code, {}).get(message_key)
    if message is None:
        logger.error(
            f"ERR_UTIL_003: Message key '{message_key}' not found for language '{lang_code}'. "
            "Context: load_language_message failure."
        )
        return _messages_data.get(lang_code, {}).get('generic_user_error', "Error: message not found.")
    return message


# --- –§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞ ---

def load_language(user_id: int, correlation_id: str = "N/A") -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ–±—Ä–∞–Ω—É –º–æ–≤—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ñ–∞–π–ª—É languages.json.
    –ü–æ–≤–µ—Ä—Ç–∞—î 'uk' –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö.

    :param user_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.
    :type user_id: int
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –ö–æ–¥ –º–æ–≤–∏ ('uk' –∞–±–æ 'en').
    :rtype: str
    """
    try:
        with open("languages.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        logger.debug(
            f"[REQ_ID:{correlation_id}] Loaded language '{data.get(str(user_id))}' for user {user_id}."
        )
        return data.get(str(user_id), "uk")
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(
            f"WARN_UTIL_002 [REQ_ID:{correlation_id}]: Failed to load languages.json for user {user_id}. Error: {e}"
        )
        return "uk"

def set_language(user_id: int, lang: str, correlation_id: str = "N/A"):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–∞–Ω—É –º–æ–≤—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–∞–π–ª—ñ languages.json.

    –Ø–∫—â–æ —Ñ–∞–π–ª `languages.json` –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, –≤—ñ–Ω –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
    –∞–±–æ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π.

    :param user_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.
    :type user_id: int
    :param lang: –ö–æ–¥ –º–æ–≤–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ('uk' –∞–±–æ 'en').
    :type lang: str
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    """
    data = {}
    try:
        if os.path.exists("languages.json"):
            with open("languages.json", "r", encoding="utf-8") as file_handle:
                data = json.load(file_handle)
    except json.JSONDecodeError as e:
        logger.warning(
            f"WARN_UTIL_003 [REQ_ID:{correlation_id}]: languages.json is corrupted for user {user_id}. "
            f"Resetting data. Error: {e}"
        )
    except FileNotFoundError:
        logger.info(
            f"[REQ_ID:{correlation_id}] languages.json not found for user {user_id}. Creating new file."
        )
        pass

    data[str(user_id)] = lang
    try:
        with open("languages.json", "w", encoding="utf-8") as file_handle:
            json.dump(data, file_handle, ensure_ascii=False, indent=2)
        logger.debug(f"[REQ_ID:{correlation_id}] Language '{lang}' saved for user {user_id}.")
    except IOError as e:
        logger.error(
            f"ERR_UTIL_004 [REQ_ID:{correlation_id}]: Failed to write to languages.json "
            f"for user {user_id}. Error: {e}", exc_info=True
        )


def is_admin(user_id: int, correlation_id: str = "N/A") -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∑–≥—ñ–¥–Ω–æ –∑ —Ñ–∞–π–ª–æ–º admins.json.

    –ß–∏—Ç–∞—î —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ `admins.json`. –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    –∞–±–æ –≤—ñ–Ω –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î False (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º).

    :param user_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.
    :type user_id: int
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, False - –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
    :rtype: bool
    """
    try:
        with open("admins.json", "r", encoding="utf-8") as file_handle:
            admins = json.load(file_handle)
        is_user_admin = user_id in admins
        logger.debug(f"[REQ_ID:{correlation_id}] User {user_id} is admin: {is_user_admin}.")
        return is_user_admin
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(
            f"WARN_UTIL_004 [REQ_ID:{correlation_id}]: admins.json not found or corrupted. "
            f"No admins defined. Error: {e}"
        )
        return False


def get_faq_answer(lang: str, question: str, correlation_id: str = "N/A") -> str:
    """
    –û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É faq.json –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    –ß–∏—Ç–∞—î –±–∞–∑—É –ø–∏—Ç–∞–Ω—å —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑ `faq.json`. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –º–æ–≤–∏ –∞–±–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

    :param lang: –ö–æ–¥ –º–æ–≤–∏ ('uk' –∞–±–æ 'en').
    :type lang: str
    :param question: –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞ —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    :type question: str
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    :rtype: str
    """
    try:
        with open("faq.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        answer = data[lang].get(question, load_language_message(lang, 'faq_answer_not_found'))
        logger.debug(
            f"[REQ_ID:{correlation_id}] FAQ answer for '{question}' ({lang}): '{answer[:50]}...'"
        )
        return answer
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(
            f"ERR_UTIL_005 [REQ_ID:{correlation_id}]: Failed to load faq.json for lang '{lang}'. "
            f"Error: {e}", exc_info=True
        )
        return load_language_message(lang, 'data_load_error')
    except KeyError: # –Ø–∫—â–æ –º–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª—ñ FAQ
        logger.error(
            f"ERR_UTIL_006 [REQ_ID:{correlation_id}]: Language '{lang}' not found in faq.json."
        )
        return load_language_message(lang, 'data_load_error')


def get_court_info(lang: str, correlation_id: str = "N/A") -> dict:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—É–¥ –∑ —Ñ–∞–π–ª—É court_info.json –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    –ß–∏—Ç–∞—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—É–¥–æ–≤—É —É—Å—Ç–∞–Ω–æ–≤—É –∑ `court_info.json`.
    –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑
    –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å.

    :param lang: –ö–æ–¥ –º–æ–≤–∏ ('uk' –∞–±–æ 'en').
    :type lang: str
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—É–¥ (–∞–¥—Ä–µ—Å–∞, –≥—Ä–∞—Ñ—ñ–∫, —Ç–µ–ª–µ—Ñ–æ–Ω, email).
    :rtype: dict
    """
    try:
        with open("court_info.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        logger.debug(f"[REQ_ID:{correlation_id}] Loaded court info for language '{lang}'.")
        return data[lang]
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(
            f"ERR_UTIL_007 [REQ_ID:{correlation_id}]: Failed to load court_info.json for lang '{lang}'. "
            f"Error: {e}", exc_info=True
        )
        return {
            "address": load_language_message(lang, 'info_not_available'),
            "work_time": load_language_message(lang, 'info_not_available'),
            "phone": load_language_message(lang, 'info_not_available'),
            "email": load_language_message(lang, 'info_not_available')
        }
    except KeyError:
        logger.error(
            f"ERR_UTIL_008 [REQ_ID:{correlation_id}]: Language '{lang}' not found in court_info.json."
        )
        return {
            "address": load_language_message(lang, 'info_not_available'),
            "work_time": load_language_message(lang, 'info_not_available'),
            "phone": load_language_message(lang, 'info_not_available'),
            "email": load_language_message(lang, 'info_not_available')
        }


def get_available_dates(correlation_id: str = "N/A") -> list:
    """
    –ì–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å—É (–±—É–¥–Ω—ñ –¥–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤).

    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç.
    :rtype: list[str]
    """
    logger.debug(f"[REQ_ID:{correlation_id}] Generating available dates.")
    today = datetime.now().date()
    dates = []
    for day_offset in range(14):
        current_date = today + timedelta(days=day_offset)
        if current_date.weekday() < 5:  # –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ (0) - –ü'—è—Ç–Ω–∏—Ü—è (4)
            dates.append(str(current_date))
    return dates

def get_available_times_for_date(selected_date: str, correlation_id: str = "N/A") -> list:
    """
    –ì–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏.
    –í–∏–∫–ª—é—á–∞—î –æ–±—ñ–¥–Ω—é –ø–µ—Ä–µ—Ä–≤—É (13:00).

    :param selected_date: –í–∏–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ Jamboree-MM-DD.
    :type selected_date: str
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ "YYYY-MM-DD HH:MM".
    :rtype: list[str]
    """
    logger.debug(f"[REQ_ID:{correlation_id}] Generating available times for date: {selected_date}.")
    times = []
    for hour in range(9, 17):
        if hour == 13:
            continue
        times.append(f"{selected_date} {hour:02d}:00")
    return times

def save_appointment(user_id: int, name: str, time: str, correlation_id: str = "N/A"):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –¥–æ —Ñ–∞–π–ª—É appointments.json.

    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å (user_id, –ü–Ü–ë, –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å) –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤.
    –Ø–∫—â–æ —Ñ–∞–π–ª `appointments.json` –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, –≤—ñ–Ω –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
    –∞–±–æ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π.

    :param user_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.
    :type user_id: int
    :param name: –ü–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –∑–∞–ø–∏—Å—É—î—Ç—å—Å—è.
    :type name: str
    :param time: –í–∏–±—Ä–∞–Ω–∏–π —á–∞—Å –∑–∞–ø–∏—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "YYYY-MM-DD HH:MM".
    :type time: str
    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    """
    data = []
    try:
        if os.path.exists("appointments.json"):
            with open("appointments.json", "r", encoding="utf-8") as file_handle:
                data = json.load(file_handle)
    except json.JSONDecodeError as e:
        logger.warning(
            f"WARN_UTIL_005 [REQ_ID:{correlation_id}]: appointments.json is corrupted for user {user_id}. "
            f"Resetting data. Error: {e}"
        )
    except FileNotFoundError:
        logger.info(
            f"[REQ_ID:{correlation_id}] appointments.json not found for user {user_id}. Creating new file."
        )
        pass

    data.append({"user_id": user_id, "name": name, "time": time})
    try:
        with open("appointments.json", "w", encoding="utf-8") as file_handle:
            json.dump(data, file_handle, ensure_ascii=False, indent=2)
        logger.info(
            f"[REQ_ID:{correlation_id}] Appointment saved for user {user_id}: {name} on {time}."
        )
    except IOError as e:
        logger.error(
            f"ERR_UTIL_009 [REQ_ID:{correlation_id}]: Failed to write to appointments.json "
            f"for user {user_id}. Error: {e}", exc_info=True
        )


def get_appointments_for_admin(correlation_id: str = "N/A") -> str:
    """
    –û—Ç—Ä–∏–º—É—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ß–∏—Ç–∞—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ `appointments.json` —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —É –≤–∏–≥–ª—è–¥—ñ
    –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞, –¥–µ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É.

    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –†—è–¥–æ–∫ –∑ —É—Å—ñ–º–∞ –∑–∞–ø–∏—Å–∞–º–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ó—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å.
    :rtype: str
    """
    try:
        with open("appointments.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        if not data:
            logger.info(f"[REQ_ID:{correlation_id}] No appointments found for admin request.")
            return load_language_message('uk', 'no_appointments_admin')
        logger.debug(f"[REQ_ID:{correlation_id}] Appointments data retrieved for admin.")
        return "\n".join([f"‚Äî {record['name']}, {record['time']}" for record in data])
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(
            f"ERR_UTIL_010 [REQ_ID:{correlation_id}]: Failed to load appointments.json for admin. "
            f"Error: {e}", exc_info=True
        )
        return load_language_message('uk', 'data_load_error')

def get_appointments_for_user(correlation_id: str = "N/A") -> str:
    """
    –û—Ç—Ä–∏–º—É—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    (–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ —É –≤–∏—Ö—ñ–¥–Ω–æ–º—É –∫–æ–¥—ñ, –∞–ª–µ –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
    –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö –±–æ—Ç–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –π–æ–≥–æ –≤–ª–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–π–Ω—è—Ç–∏—Ö —á–∞—Å—ñ–≤, —è–∫ —É –≤–∏—Ö—ñ–¥–Ω–æ–º—É –∫–æ–¥—ñ.)

    :param correlation_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Ç—É –¥–ª—è —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è.
    :type correlation_id: str
    :returns: –†—è–¥–æ–∫ –∑ —É—Å—ñ–º–∞ –∑–∞–π–Ω—è—Ç–∏–º–∏ —á–∞—Å–∞–º–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ó—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å.
    :rtype: str
    """
    try:
        with open("appointments.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        logger.debug(f"[REQ_ID:{correlation_id}] Appointments data retrieved for user (all).")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –ø–æ user_id
        return "\n".join([f"‚Äî {record['time']} ‚ùå –ó–∞–π–Ω—è—Ç–æ" for record in data])
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(
            f"ERR_UTIL_011 [REQ_ID:{correlation_id}]: Failed to load appointments.json for user. "
            f"Error: {e}", exc_info=True
        )
        return load_language_message('uk', 'no_appointments_user')


async def send_admin_notification(bot_instance, message: str, user_info: dict = None):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.
    –ß–∏—Ç–∞—î ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ —Ñ–∞–π–ª—É admins.json.

    :param bot_instance: –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (context.bot).
    :param message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :type message: str
    :param user_info: –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (id, username, correlation_id).
                      –ú–æ–∂–µ –±—É—Ç–∏ None.
    :type user_info: dict
    """
    try:
        with open("admins.json", "r", encoding="utf-8") as file_handle:
            admins = json.load(file_handle)
        if not admins:
            logger.warning("WARN_UTIL_006: No admin IDs found in admins.json. Cannot send notification.")
            return

        admin_notification_text = load_language_message('uk', 'admin_critical_error_notification')

        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–∞–¥–∞–Ω–∞
        context_info = ""
        if user_info:
            context_info += f"\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_info.get('username', 'N/A')} ({user_info.get('user_id', 'N/A')})"
            context_info += f"\nREQ_ID: {user_info.get('correlation_id', 'N/A')}"
            context_info += f"\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user_info.get('user_friendly_message', 'N/A')}"

        full_message = f"{admin_notification_text}{context_info}\n\n–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:\n{message}"

        for admin_id in admins:
            try:
                await bot_instance.send_message(chat_id=admin_id, text=full_message)
                logger.info(f"Sent critical error notification to admin {admin_id}.")
            except Exception as e:
                logger.error(f"ERR_UTIL_012: Failed to send notification to admin {admin_id}. Error: {e}", exc_info=True)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.critical(f"ERR_UTIL_013: Critical: Cannot load admins.json to send notification. Error: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"ERR_UTIL_014: Unexpected error in send_admin_notification: {e}", exc_info=True)

