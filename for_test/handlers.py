"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram-–±–æ—Ç—ñ.

–ú—ñ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó-–æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –≤–∑–∞—î–º–æ–¥—ñ—ó,
—Ç–∞–∫–∏—Ö —è–∫ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –≤–∏–±—ñ—Ä –º–æ–≤–∏, –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó,
–∞ —Ç–∞–∫–æ–∂ –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.
"""
import json
import logging
from telegram import Update
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)
from for_test.utils import (
    load_language, set_language, get_faq_answer, get_court_info,
    get_available_dates, get_available_times_for_date,
    save_appointment, send_admin_notification, load_language_message, is_admin # –î–æ–¥–∞–Ω–æ load_language_message, is_admin
)
from for_test.keyboards import (
    get_main_menu, get_language_keyboard, get_faq_keyboard, get_inline_keyboard
)

# –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è ConversationHandler
LANG_SELECT, ASK_NAME, ASK_DATE, ASK_TIME = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.

    –ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –æ–±—Ä–∞—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏. –¶–µ –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ –±–æ—Ç–∞.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    :returns: –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è ConversationHandler.
    :rtype: int
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    logger.info(f"User {username} ({user_id}) started the dialog. Context: {context.user_data}")
    try:
        await update.message.reply_text(
            load_language_message('uk', 'choose_language'), reply_markup=get_language_keyboard()
        )
    except Exception as e:
        logger.error(f"ERR_HANDLER_001: Failed to send start message to user {user_id}: {e}", exc_info=True)
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–∞–≥–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
        await update.message.reply_text(
            load_language_message('uk', 'generic_user_error')
        )
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_001 –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥—ñ–∞–ª–æ–≥—É –¥–ª—è {user_id}. {e}"
        )
    return LANG_SELECT

async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏.

    –ó–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–∞–Ω—É –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É)
    —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ü—å–æ–≥–æ –≤–∏–±–æ—Ä—É.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (callback_query).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    :returns: –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è ConversationHandler, –∑–∞–≤–µ—Ä—à—É—é—á–∏ –≤–∏–±—ñ—Ä –º–æ–≤–∏.
    :rtype: int
    """
    lang = update.callback_query.data
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    try:
        set_language(user_id, lang)
        logger.info(f"User {username} ({user_id}) set language to '{lang}'.")
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            load_language_message(lang, 'language_set_success'), reply_markup=get_main_menu(lang)
        )
    except Exception as e:
        logger.error(f"ERR_HANDLER_002: Error setting language for user {user_id}: {e}", exc_info=True)
        await update.callback_query.message.reply_text(
            load_language_message(lang, 'generic_user_error_with_contact')
        )
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_002 –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–æ–≤–∏ –¥–ª—è {user_id}. {e}"
        )
    return ConversationHandler.END

async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –ø–æ—à–∏—Ä–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å (FAQ).

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ FAQ
    –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    logger.debug(f"User {user_id} requested FAQ. Lang: {lang}")
    try:
        await update.message.reply_text(load_language_message(lang, 'choose_faq_question'),
                                        reply_markup=get_faq_keyboard(lang))
    except Exception as e:
        logger.error(f"ERR_HANDLER_003: Error showing FAQ for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_003 –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ FAQ –¥–ª—è {user_id}. {e}"
        )

async def answer_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∏–±—Ä–∞–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ FAQ.

    –û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è, –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å
    (faq.json) —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    question = update.message.text
    logger.debug(f"User {user_id} asked: '{question}'. Lang: {lang}")
    try:
        answer = get_faq_answer(lang, question)
        if "‚ö†Ô∏è" in answer: # –ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –≤–∏—è–≤–∏—Ç–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            logger.warning(f"WARN_HANDLER_001: No FAQ answer found for user {user_id} for question: '{question}'.")
        await update.message.reply_text(answer, reply_markup=get_main_menu(lang))
    except Exception as e:
        logger.error(f"ERR_HANDLER_004: Error answering FAQ for user {user_id} for question '{question}': {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_004 –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ FAQ –¥–ª—è {user_id}. {e}"
        )

async def show_court_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—É–¥–æ–≤—É —É—Å—Ç–∞–Ω–æ–≤—É.

    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—É–¥
    (–∞–¥—Ä–µ—Å–∞, –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏, —Ç–µ–ª–µ—Ñ–æ–Ω, email) –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    logger.debug(f"User {user_id} requested court info. Lang: {lang}")
    try:
        info = get_court_info(lang)
        text = (
            f"üìç {load_language_message(lang, 'address')}: {info['address']}\n"
            f"üïí {load_language_message(lang, 'schedule')}: {info['work_time']}\n"
            f"üìû {load_language_message(lang, 'phone')}: {info['phone']}\n"
            f"‚úâÔ∏è {load_language_message(lang, 'email')}: {info['email']}"
        )
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"ERR_HANDLER_005: Error showing court info for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_005 –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ –ø—Ä–æ —Å—É–¥ –¥–ª—è {user_id}. {e}"
        )

async def show_court_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É —Å—É–¥–æ–≤–∏—Ö –∑–∞—Å—ñ–¥–∞–Ω—å.

    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥ –∑ court_schedule.json
    —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —É —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    logger.debug(f"User {user_id} requested court schedule. Lang: {lang}")
    try:
        with open("court_schedule.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        if not data:
            msg = load_language_message(lang, 'no_schedule_available')
            logger.info(f"User {user_id}: No schedule data found.")
        else:
            msg = load_language_message(lang, 'court_schedule_title') + "\n"
            for item in data:
                msg += (
                    f"{item['date']} ‚Äì {load_language_message(lang, 'case')}"
                    f" {item['case']}: {item['time']},"
                    f" {load_language_message(lang, 'judge')} {item['judge']}\n"
                )
        await update.message.reply_text(msg)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"ERR_HANDLER_006: Error loading court schedule for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'data_load_error'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_006 –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É —Å—É–¥—É –¥–ª—è {user_id}. {e}"
        )
    except Exception as e:
        logger.error(f"ERR_HANDLER_007: Unexpected error in show_court_schedule for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_007 –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É —Å—É–¥—É –¥–ª—è {user_id}. {e}"
        )

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —ñ–Ω—à–∏—Ö —É—Å—Ç–∞–Ω–æ–≤.

    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ contacts.json
    —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    logger.debug(f"User {user_id} requested other contacts. Lang: {lang}")
    try:
        with open("contacts.json", "r", encoding="utf-8") as file_handle:
            data = json.load(file_handle)
        entries = data.get(lang, [])
        if not entries:
            msg = load_language_message(lang, 'no_contacts_available')
            logger.info(f"User {user_id}: No contacts data found for lang {lang}.")
        else:
            msg = load_language_message(lang, 'other_contacts_title') + "\n"
            for contact in entries:
                msg += f"üìå {contact['org']} ‚Äî {contact['phone']}\n"
        await update.message.reply_text(msg)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"ERR_HANDLER_008: Error loading other contacts for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'data_load_error'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_008 –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è {user_id}. {e}"
        )
    except Exception as e:
        logger.error(f"ERR_HANDLER_009: Unexpected error in show_contacts for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_009 –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è {user_id}. {e}"
        )

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

    –ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –π–æ–≥–æ –ü–Ü–ë –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–∞–ø–∏—Å—É.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥ —É —Å—Ç–∞–Ω ASK_NAME.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    :returns: –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É.
    :rtype: int
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    logger.info(f"User {user_id} started appointment booking.")
    try:
        await update.message.reply_text(load_language_message(lang, 'enter_full_name'))
    except Exception as e:
        logger.error(f"ERR_HANDLER_010: Error asking name for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_010 –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ü–Ü–ë –¥–ª—è {user_id}. {e}"
        )
    return ASK_NAME

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

    –ó–±–µ—Ä—ñ–≥–∞—î –≤–≤–µ–¥–µ–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ü–Ü–ë —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
    –¥–ª—è –∑–∞–ø–∏—Å—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥ —É —Å—Ç–∞–Ω ASK_DATE.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ü–Ü–ë).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î user_data.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    :returns: –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É.
    :rtype: int
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    try:
        context.user_data["name"] = update.message.text
        logger.debug(f"User {user_id} entered name: {context.user_data['name']}")
        dates = get_available_dates()
        if not dates:
            logger.warning(f"WARN_HANDLER_002: No available dates generated for user {user_id}.")
            await update.message.reply_text(load_language_message(lang, 'no_dates_available'))
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥—ñ–∞–ª–æ–≥, –±–æ –Ω–µ–º–∞—î –¥–∞—Ç
        await update.message.reply_text(load_language_message(lang, 'choose_date'), reply_markup=get_inline_keyboard(dates))
    except Exception as e:
        logger.error(f"ERR_HANDLER_011: Error asking date for user {user_id} after name input: {e}", exc_info=True)
        await update.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_011 –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–∞—Ç–∏ –¥–ª—è {user_id}. {e}"
        )
    return ASK_DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

    –ó–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏
    –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥—ñ–∞–ª–æ–≥ —É —Å—Ç–∞–Ω ASK_TIME.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (callback_query –∑ –¥–∞—Ç–æ—é).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î user_data.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    :returns: –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É.
    :rtype: int
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    try:
        selected_date = update.callback_query.data
        context.user_data["selected_date"] = selected_date
        logger.debug(f"User {user_id} selected date: {selected_date}")
        times = get_available_times_for_date(selected_date)
        if not times:
            logger.warning(f"WARN_HANDLER_003: No available times generated for user {user_id} on {selected_date}.")
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(load_language_message(lang, 'no_times_available'))
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥—ñ–∞–ª–æ–≥
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(load_language_message(lang, 'choose_time'), reply_markup=get_inline_keyboard(times))
    except Exception as e:
        logger.error(f"ERR_HANDLER_012: Error asking time for user {user_id} after date input: {e}", exc_info=True)
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_012 –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —á–∞—Å—É –¥–ª—è {user_id}. {e}"
        )
    return ASK_TIME

async def confirm_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

    –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Å (–ü–Ü–ë, –¥–∞—Ç—É, —á–∞—Å) —É appointments.json
    —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É. –ó–∞–≤–µ—Ä—à—É—î –¥—ñ–∞–ª–æ–≥.

    :param update: –û–±'—î–∫—Ç, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (callback_query –∑ —á–∞—Å–æ–º).
    :type update: telegram.Update
    :param context: –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –º—ñ—Å—Ç–∏—Ç—å user_data.
    :type context: telegram.ext.ContextTypes.DEFAULT_TYPE
    :returns: –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É, —â–æ —Å–∏–≥–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
    :rtype: int
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    try:
        time = update.callback_query.data
        name = context.user_data.get("name", load_language_message(lang, 'no_name_provided'))

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å (–±–∞–∑–æ–≤–∞)
        # –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —É utils
        appointments_exist = False # –ó–∞–≥–ª—É—à–∫–∞, –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å—Ç—É–ø –¥–æ appointments.json
        # if appointments_exist:
        #    logger.warning(f"WARN_HANDLER_004: User {user_id} attempted to book already taken slot: {time}")
        #    await update.callback_query.message.reply_text(load_language_message(lang, 'slot_already_taken'))
        #    return ConversationHandler.END

        save_appointment(user_id, name, time)
        logger.info(f"User {user_id} successfully booked appointment: {name} on {time}.")
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            load_language_message(lang, 'appointment_booked_success'), reply_markup=get_main_menu(lang)
        )
    except Exception as e:
        logger.error(f"ERR_HANDLER_013: Error confirming appointment for user {user_id}: {e}", exc_info=True)
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(load_language_message(lang, 'generic_user_error_with_contact'))
        await send_admin_notification(
            context.bot, f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ERR_HANDLER_013 –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É –¥–ª—è {user_id}. {e}"
        )
    return ConversationHandler.END

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∂–æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
async def fallback_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ –±—É–ª–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ.

    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞.
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    logger.info(f"User {user_id} sent unrecognized message: '{update.message.text}'")
    await update.message.reply_text(load_language_message(lang, 'unrecognized_command'), reply_markup=get_main_menu(lang))


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ (–ª–∏—à–µ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, –Ω–µ –ø–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª)
async def admin_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.

    –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.
    """
    user_id = update.effective_user.id
    lang = load_language(user_id)
    if is_admin(user_id):
        logger.info(f"Admin {user_id} used admin command.")
        await update.message.reply_text(load_language_message(lang, 'admin_panel_greeting'))
    else:
        logger.warning(f"Unauthorized access attempt to admin command by user {user_id}.")
        await update.message.reply_text(load_language_message(lang, 'unauthorized_access'))


def register_handlers(app):
    """–†–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤ –æ–±'—î–∫—Ç—ñ Telegram Application.

    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—î CommandHandler –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start, ConversationHandler
    –¥–ª—è –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é, –∞ —Ç–∞–∫–æ–∂ MessageHandler
    —Ç–∞ CallbackQueryHandler –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫.

    :param app: –û–±'—î–∫—Ç Application, –¥–æ —è–∫–æ–≥–æ —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –æ–±—Ä–æ–±–Ω–∏–∫–∏.
    :type app: telegram.ext.Application
    """
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(üìù|üìÖ) –ó–∞–ø–∏—Å"), ask_name)],
        states={
            LANG_SELECT: [CallbackQueryHandler(language_selected)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            ASK_DATE: [CallbackQueryHandler(ask_time)],
            ASK_TIME: [CallbackQueryHandler(confirm_time)],
        },
        fallbacks=[
            # –¶–µ–π fallback –æ–±—Ä–æ–±–Ω–∏–∫ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å —â–æ—Å—å –Ω–µ –æ—á—ñ–∫—É–≤–∞–Ω–µ
            # –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–∞–ª–æ–≥—É –∞–±–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
            MessageHandler(filters.TEXT | filters.COMMAND, fallback_message_handler),
            CallbackQueryHandler(fallback_message_handler) # –î–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback_query
        ]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command_handler)) # –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫—É –∫–æ–º–∞–Ω–¥—É
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(language_selected, pattern="^(uk|en)$"))
    app.add_handler(MessageHandler(filters.Regex("^(‚ùì FAQ|‚ùì –ü–æ—à–∏—Ä–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è)$"), show_faq))
    app.add_handler(MessageHandler(filters.Regex(r"^(–Ø–∫|How).*"), answer_faq))
    app.add_handler(MessageHandler(filters.Regex("^(‚ÑπÔ∏è|üìç)"), show_court_info))
    app.add_handler(MessageHandler(
        filters.Regex("^(üóì –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞—Å—ñ–¥–∞–Ω—å|üóì Hearing Calendar)$"),
        show_court_schedule
    ))
    app.add_handler(MessageHandler(
        filters.Regex("^(üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ —ñ–Ω—à–∏—Ö —É—Å—Ç–∞–Ω–æ–≤|üìû Other Institutions)$"),
        show_contacts
    ))
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –±—É–¥—å-—è–∫–∏—Ö —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ –±—É–ª–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ
    # –†–æ–∑–º—ñ—â—É—î—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–º, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—Ç–∏ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_message_handler))

